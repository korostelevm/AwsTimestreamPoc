AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    CICD notifier
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
Globals:
    Function:
        Timeout: 30
        Environment:
          Variables:
            DEBUG: True
            DATABASE_NAME: !Join ["", ["TimestreamDb", !Ref Namespace]]
            TABLE_NAME: !Join ["", ["TimestreamTable", !Ref Namespace]]
        #     TimeseriesTable: !Ref TimeseriesTable
            # AppBucket: "{{resolve:ssm:/account/app-bucket:1}}"
            # InternalMicroservicesAPIKey: !Ref InternalMicroservicesAPIKey
            # RememberUrl:
            #   !Join ["", ["https://rememberv2.",!Ref Namespace, !Ref RootUrl, '/latest']]

Parameters:
    RootUrl:
        Type: String
        Default: '{{resolve:ssm:/account/root-url:1}}'
    SslCert: 
      Type: String
      Default: '{{resolve:ssm:/account/ssl-cert:1}}'
    Namespace:
        Type: String
        Default: 'timestream'
    BucketName:
        Type: String
        Default: ''
    SlackSqsBatchSize:
      Type: String
      Default: '5'
    MaxSqsRetries:
      Type: String
      Default: '5'
    InternalMicroservicesAPIKey:
      Type: String
      Default: "{{resolve:ssm:/account/internal-api-key:1}}"
    AccountName:
      Type: String
      Default: "{{resolve:ssm:/account/name:1}}"

    SessionSecret:
        Description: Session Secret
        Type: String
        Default: '{{resolve:ssm:/idp/default/session-secret:1}}'
    ClientId:
        Description: Client Id
        Type: String
        Default: '{{resolve:ssm:/idp/default/client-id:1}}'
    TokenUrl:
        Description: Token Url
        Type: String
        Default: '{{resolve:ssm:/idp/default/token-url:1}}'
    ClientSecret:
        Description: Client Secret
        Type: String
        Default: '{{resolve:ssm:/idp/default/client-secret:1}}'
    AuthorizationUrl:
        Description: Authorization Url
        Type: String
        Default: '{{resolve:ssm:/idp/default/authorization-url:1}}'


Resources:
  TimestreamDb:
      Type: AWS::Timestream::Database
      Properties: 
        DatabaseName: !Join ["", ["TimestreamDb", !Ref Namespace]]
        # KmsKeyId: String

  TimestreamTable:
    Type: AWS::Timestream::Table
    Properties: 
      DatabaseName: !Ref TimestreamDb
      RetentionProperties:
          MemoryStoreRetentionPeriodInHours: "8766"
          MagneticStoreRetentionPeriodInDays: "730"
      TableName: !Join ["", ["TimestreamTable", !Ref Namespace]]
          
  QueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", ["QueryLambda", !Ref Namespace]]
      CodeUri: service/
      Handler: query_handler.query_handler
      Runtime: nodejs10.x
      Tracing: Active
      MemorySize: 3008
      Timeout: 30
      Policies:
        - Statement:    
            [{
              "Effect": "Allow",
              "Action": ["lambda:*","states:*","s3:*", "firehose:*","sns:*","timestream:*"],
              "Resource": "*"
            }]
  
  TopicLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", ["TopicLambda", !Ref Namespace]]
      CodeUri: service/
      Handler: topic_handler.topic_handler
      Runtime: nodejs10.x
      Tracing: Active
      MemorySize: 3008
      Timeout: 30
      Policies:
        - Statement:    
            [{
              "Effect": "Allow",
              "Action": ["lambda:*","states:*","s3:*", "firehose:*","sns:*","timestream:*"],
              "Resource": "*"
            }]
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:DatapointStream'
            SqsSubscription: True
            # FilterPolicy:
            #   datapoint_type: 
            #     - CustomerTransaction
  
  StatusDomainName:
        Type: AWS::ApiGateway::DomainName
        Properties:
          SecurityPolicy: "TLS_1_2"
          RegionalCertificateArn:
            Ref: SslCert
          DomainName:
            Fn::Join: [ '', [ 'tx-status', Ref: Namespace, '.', Ref: RootUrl ] ]
          EndpointConfiguration:
            Types: ['REGIONAL']

  StatusRecordSet:
        Type: AWS::Route53::RecordSetGroup
        Properties:
          HostedZoneName:
              Fn::Join: [ '', [ Ref: RootUrl, '.' ] ]
          RecordSets:
          - Name:
                Ref: StatusDomainName
            Type: A
            AliasTarget:
                DNSName:
                    Fn::GetAtt: [StatusDomainName, RegionalDomainName]
                HostedZoneId:
                    Fn::GetAtt: [StatusDomainName, RegionalHostedZoneId]


  ServiceApi:
      Type: AWS::Serverless::Api
      Properties:
          StageName: 'Prod'
          Cors:
              AllowMethods: "'*'"
              AllowHeaders: "'*'"
              AllowOrigin: "'*'"
          BinaryMediaTypes:
              - "*/*"

      
  APIBasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping 
        Properties:
            Stage: !Ref ServiceApi.Stage
            BasePath: ''
            DomainName: !Ref StatusDomainName
            RestApiId: !Ref ServiceApi

  # TxFailuresHttpApi:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     Domain:
  #       DomainName: !Join [ '', [ 'transactions', !Ref Namespace, '.', !Ref RootUrl ] ]
  #       CertificateArn: !Ref 'SslCert'
  #       EndpointConfiguration: REGIONAL
  #       Route53:
  #         HostedZoneName:
  #           Fn::Join: [ '', [ Ref: RootUrl, '.' ] ]
  

  ServiceApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./frontend
      Handler: frontend.handler
      Tracing: Active
      MemorySize: 1024
      # ReservedConcurrentExecutions: 999
      Runtime: nodejs12.x
      Timeout: 30
      Policies:
        - Statement:
            [{
                "Effect": "Allow",
                "Action": ["logs:*","s3:*"],
                "Resource": "*"
            }]
      Environment:
        Variables:
          ROOT_URL: !Ref RootUrl
          SESSION_SECRET: !Ref SessionSecret
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          AUTHORIZATION_URL: !Ref AuthorizationUrl
          TOKEN_URL: !Ref TokenUrl
      Events:
        ProxyIntegratorGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /{proxy+}
            Method: ANY
        GETProxyIntegratorGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /_transactions
            Method: GET
        Get:
            Type: Api
            Properties:
                Path: /
                RestApiId: !Ref ServiceApi
                Method: GET
        Login:
            Type: Api
            Properties:
                Path: /login
                RestApiId: !Ref ServiceApi
                Method: GET
        CallBacks:
            Type: Api
            Properties:
                Path: /login/callback
                RestApiId: !Ref ServiceApi
                Method: GET
  SocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
        - 
          AttributeName: UserId
          AttributeType: S
        -
          AttributeName: ts
          AttributeType: N
        KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
        GlobalSecondaryIndexes:
          -
            IndexName: UserIdIndex
            KeySchema:
              - 
                  AttributeName: UserId
                  KeyType: HASH
              -
                  AttributeName: ts
                  KeyType: RANGE
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: True
        TableName: !Join [ '', [ 'TxStatusSocketConnections'] ]
  
  WssAPIBasePathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - Stage
    Properties:
        Stage: Prod
        DomainName: !Ref WssAPIDomainName
        ApiId: !Ref ServiceWssApi
  
  WssAPIDomainName:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: !Join [ '', [ 'tx-status-wss.', !Ref RootUrl ] ]
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref SslCert
  
  
  WssAPIDomain:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: WssAPIDomainName
    Properties:
      HostedZoneName: !Join [ '', [ !Ref RootUrl, '.' ] ]
      RecordSets:
      - Name: !Ref WssAPIDomainName
        Type: A
        AliasTarget:
            DNSName: 
              Fn::GetAtt: [WssAPIDomainName, RegionalDomainName]
            HostedZoneId: 
              Fn::GetAtt: [WssAPIDomainName, RegionalHostedZoneId]


  ServiceWssApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ServiceWssApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServiceWssApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServiceWssApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServiceWssApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServiceWssApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServiceWssApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServiceWssApi
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref ServiceWssApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ServiceWssApi

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: frontend
      Handler: wss/wss.on_connect
      MemorySize: 256
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME: !Join [ '', [ 'TxStatusSocketConnections'] ]
          DOMAIN_NAME: !Join [ '', [ 'tx-status-wss.', !Ref RootUrl ] ]
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Join [ '', [ 'TxStatusSocketConnections'] ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServiceWssApi}/*'



  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ServiceWssApi
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: frontend
      Handler: wss/wss.on_disconnect
      MemorySize: 256
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME: !Join [ '', [ 'TxStatusSocketConnections'] ]
          DOMAIN_NAME: !Join [ '', [ 'tx-status-wss.', !Ref RootUrl ] ]
      Policies:
      - Statement:
          [{
            "Effect": "Allow",
            "Action": ['dynamodb:*'],
            "Resource": "*"
          }]
      - DynamoDBCrudPolicy:
          TableName: !Join [ '', [ 'TxStatusSocketConnections'] ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServiceWssApi}/*'

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ServiceWssApi
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: frontend
      Handler: wss/wss.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME: !Join [ '', [ 'TxStatusSocketConnections'] ]
          DOMAIN_NAME: !Join [ '', [ 'tx-status-wss.', !Ref RootUrl ] ]
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Join [ '', [ 'TxStatusSocketConnections'] ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServiceWssApi}/*'
          
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ServiceWssApi
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  